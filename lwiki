#!/bin/bash

#------------------------------------------------------------------------------
# from mshex/functions/hdirname.sh

function hdirname/readlink {
  local path="$1"
  case "$OSTYPE" in
  (cygwin|linux-gnu)
    PATH=/bin:/usr/bin readlink -f "$path" ;;
  (darwin*|*)
    local PWD="$PWD" OLDPWD="$OLDPWD"
    while [[ -h $path ]]; do
      local link="$(PATH=/bin:/usr/bin readlink "$path" || true)"
      [[ $link ]] || break

      if [[ $link = /* || $path != */* ]]; then
        path="$link"
      else
        local dir="${path%/*}"
        path="${dir%/}/$link"
      fi
    done
    echo -n "$path" ;;
  esac
}

function hdirname {
  if [[ $1 == -v ]]; then
    eval '
      '$2'="$3"
      [[ -h ${'$2'} ]] && '$2'=$(hdirname/readlink "${'$2'}")

      if [[ ${'$2'} == */* ]]; then
        '$2'="${'$2'%/*}"
        : "${'$2':=/}"
      else
        '$2'="${4-$PWD}"
      fi
    '
  elif [[ $1 == -v* ]]; then
    hdirname -v "${1:2}" "${@:2}"
  else
    local ret
    hdirname -v ret "$@"
    echo -n "$ret"
  fi
}
#------------------------------------------------------------------------------

hdirname -v LWIKIPATH "$0"

function convert {
  local file=
  local opt_error=
  local opt_header=
  local opt_lwikibase=${LWIKI_BASE:-/~murase/wiki}
  local opt_aghbase=/~murase/agh
  local opt_title=
  while (($#)); do
    local arg="$1"
    shift
    case "$arg" in
    (--header) opt_header=1 ;;
    (--lwiki-base=*) opt_lwikibase=${arg#*=} ;;
    (--agh-base=*)   opt_aghbase=${arg#*=} ;;
    (--title=*)      opt_title=${arg#*=} ;;
    (-*)
      opt_error=1
      echo "${0##*/} (arg $arg): an unrecognized option." >&2 ;;
    (*)
      if [[ $file ]]; then
        opt_error=1
        echo "${0##*/} (arg $arg): multiple files cannot be specified." >&2
      fi

      if [[ ! -e $arg ]]; then
        opt_error=1
        echo "${0##*/} (arg $arg): the specified file does not exist." >&2
      elif [[ ! -f $arg ]]; then
        opt_error=1
        echo "${0##*/} (arg $arg): the specified file is not an ordinary file." >&2
      else
        file="$arg"
      fi ;;
    esac
  done

  if [[ ! $file ]]; then
    opt_error=1
    echo "${0##*/} (arg $arg): an input file is not specified." >&2
  fi

  [[ $opt_error ]] && return 1

  [[ $opt_title ]] || opt_title="$file"

  if [[ $opt_header ]]; then
    printf '<html><head>\n'
    echo "<title>$opt_title</title>"
    printf '<meta name="agh-fly-type" content="tex" /><script src="%s/agh.fly.js"></script>\n' "$opt_aghbase"
    printf '<script type="text/javascript" charset="utf-8" src="%s/res/lwiki.js"></script>\n' "$opt_lwikibase"
    printf '<link rel="stylesheet" charset="utf-8" href="%s/res/lwiki.css">\n' "$opt_lwikibase"
    printf '</head><body>'
    printf '<div class="lwiki-page-holder">'
    echo "<h1>$opt_title</h1>"
    printf '<div class="lwiki-page-content">'
  fi

  LWIKI_BASE="$opt_lwikibase" php "$LWIKIPATH/lwiki-convert" "$file"

  if [[ $opt_header ]]; then
    printf '</div></div></body></html>'
  fi
}

function command.view {
  convert "$@" | w3m -T text/html
}

# function command.links {
#   ftmp="$(mktemp XXXXXXXXXX.htm)"
#   convert "$@" > "$ftmp"
#   links  -html-assume-codepage utf-8 "$ftmp"
#   rm -f "$ftmp"
# }

function command.convert {
  convert "$@"
}

#------------------------------------------------------------------------------

function check-lwiki-directory {
  if [[ ! -d .lwiki ]]; then
    echo "lwiki: this is not a lwiki directory" >&2
    return 1
  fi
}

function command.init {
  local base=$(cd -P $LWIKIPATH; echo -n $PWD)

  if [[ -d .data && -d .lock && -d res && -h index.php && -h .lib ]]; then
    echo "lwiki-init: Updating old type lwiki directory..."
    mkdir .lwiki
    mv .data .lwiki/data
    mv .lock .lwiki/lock
    mv .lib .lwiki/lib
    echo "lwiki-init: done"
    return 0
  fi

  if [[ -d .lwiki ]]; then
    echo "lwiki-init: The subdirectory \`.lwiki' already exists!" >&2
    echo "lwiki-init: This directory may be already a lwiki directory." >&2
    echo "lwiki-init: Failed to initialize the lwiki directory." >&2
    return 1
  fi

  if [[ -e index.php || -e res ]]; then
    echo "lwiki-init: The file index.php or res already exists!" >&2
    echo "lwiki-init: Failed to initialize the lwiki directory." >&2
    return 1
  fi

  authhash=($(od -N 8 -A n -t x8 /dev/urandom))
  mkdir -p .lwiki/data .lwiki/lock
  ln -s "$base/res" res
  ln -s "$base/lib" .lwiki/lib
  ln -s "$base/index.php" index.php
  sed "s/%authhash%/$authhash/" "$base/lwiki_config.php" > lwiki_config.php

  echo "lwiki-init: add access permission of .lwiki/data and .lwiki/lock to the user \`apache'..."
  if type setfacl &>/dev/null; then
    chmod 755 .lwiki/data .lwiki/lock
    setfacl -m u:apache:rwx .lwiki/data .lwiki/lock
    chmod 600 lwiki_config.php
    setfacl -m u:apache:r lwiki_config.php
  else
    echo "lwiki: command \`setfacl' is not found. Instead, change group of the file to \`apache'." >&2
    chmod 775 .lwiki/data .lwiki/lock
    echo "lwiki$ sudo chown :apache .lwiki/data .lwiki/lock" >&2
    sudo chown :apache .lwiki/data .lwiki/lock
  fi

  local is_selinux_enabled=
  [[ $(getenforce) == Enforcing ]] && is_selinux_enabled=1
  if [[ $is_selinux_enabled ]]; then
    echo "lwiki$ sudo chcon -R -t httpd_sys_rw_content_t .lwiki/lock .lwiki/data" >&2
    sudo chcon -R -t httpd_sys_rw_content_t .lwiki/lock .lwiki/data
  fi

  echo "lwiki-init: done"
}

function command.archive {
  check-lwiki-directory || return 1

  (
    cd .lwiki/data
    tar caf ../../"${1:-data}".$(date +%Y%m%d).tar.xz *
  )
}

#
# RewriteCond で現在位置の相対パスに対して条件を判定する方法
#   http://stackoverflow.com/questions/8617191/how-to-get-the-local-path-in-rewritecond
#

function command.enable-rewrite {
  check-lwiki-directory || return 1

  if [[ ! -e .htaccess ]]; then
    echo '# htaccess' > .htaccess
  fi

  if grep -Eq '^# <lwiki enable-rewrite>' .htaccess; then
    echo 'lwiki enable-rewrite: Rewrite already enabled!' >&2
  elif grep -Eq '^# <lwiki disable-rewrite>' .htaccess; then
    sed '/^# <lwiki disable-rewrite>/,/^# <\/lwiki>/{
      s/^# <lwiki disable-rewrite>/# <lwiki enable-rewrite>/
      s/^# Rewrite/Rewrite/
    }' .htaccess > .htaccess.part &&
      /bin/mv .htaccess.part .htaccess
  else
    cat <<'EOF' >> .htaccess

# <lwiki enable-rewrite>
# automatically inserted by `lwiki enable-rewrite' command
RewriteEngine on
RewriteRule ^(res|index.php)(/|$) - [L]
RewriteRule ^([^?]+)$ index.php?id=$1 [L,QSA]
# </lwiki>
EOF
  fi
}

function command.disable-rewrite {
  check-lwiki-directory || return 1

  if [[ ! -e .htaccess ]]; then
    echo '# htaccess' > .htaccess
  fi

  if grep -Eq '^# <lwiki enable-rewrite>' .htaccess; then
    sed '/^# <lwiki enable-rewrite>/,/^# <\/lwiki>/{
      s/^# <lwiki enable-rewrite>/# <lwiki disable-rewrite>/
      s/^Rewrite/# Rewrite/
    }' .htaccess > .htaccess.part &&
      /bin/mv .htaccess.part .htaccess
  elif grep -Eq '^# <lwiki disable-rewrite>' .htaccess; then
    echo 'lwiki enable-rewrite: Rewrite already disabled!' >&2
  else
    cat <<'EOF' >> .htaccess

# <lwiki disable-rewrite>
# automatically inserted by `lwiki enable-rewrite' command
# RewriteEngine on
# RewriteRule ^(res|index.php)(/|$) - [L]
# RewriteRule ^([^?]+)$ index.php?id=$1 [L,QSA]
# </lwiki>
EOF
  fi
}

function command.page-convert {
  check-lwiki-directory || return 1

  local pageid
  local fError=
  local -a pageids
  pageids=()
  if (($#)); then
    for pageid in "$@"; do
      if [[ ! -f .lwiki/data/page.$pageid.wiki ]]; then
        echo "lwiki.page-convert: the specified page, pageid=$pageid, is not found." >&2
        fError=1
        continue
      fi
      pageids+=("$pageid")
    done
  else
    local page
    for page in .lwiki/data/page.*.wiki; do
      pageid="${page#.lwiki/data/page.}"
      pageid="${pageid%.wiki}"
      pageids+=("$pageid")
    done
  fi

  [[ $fError ]] && return 1

  for pageid in "${pageids[@]}"; do
    echo "$pageid"
    php "$LWIKIPATH"/lwiki-page-convert.php "$pageid"
  done
}

function command.ls {
  check-lwiki-directory || return 1

  local page
  for page in .lwiki/data/page.*.wiki; do
    pageid="${page#.lwiki/data/page.}"
    pageid="${pageid%.wiki}"
    echo "$pageid"
  done
}

if [[ ! $1 ]]; then
  echo "lwiki: operation not specified" >&2
  exit 1
fi
name="$1"
shift 1

if ! declare -f "command.$name" &> /dev/null; then
  echo "lwiki: unrecognized operation: '$name'" >&2
  exit 1
fi

"command.$name" "$@"
